{"version":3,"sources":["../src/OofA.js"],"names":[],"mappings":"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","file":"OofA.js","sourcesContent":["// OofA = Object of Arrays.\n//\n// Generally arrays of objects (AofO) are used for homogeneous data instances.\n//\n// OofA is an alternative that uses a single Object who's values represent  a\n// single variable's values. This quirky idea is usefull for drasticly reduced\n// memory footprint, and for being WebGL-friendly.\n//\n// This is an experimental module implementing OofA as a class\n\nclass OofA {\n  // The constructor has three parameters:\n  //\n  // arraySpecs: Define the Object's data arrays.\n  // The arrays can be TypedArrays, standard JavaScript Arrays, or constants.\n  //\n  // initSize: the initial size used for [TypedArrays](https://goo.gl/3OOQzy)\n  //\n  // sizeDelta: how much to grow the TypedArrays when they overflow.\n  constructor (arraySpecs, initSize = 100, sizeDelta = 100) {\n    // arraySpec details: Three forms are used.\n    //\n    // The \"key\" is the name of the array. The values are brackets specifying\n    // formats for the Object's arrays.\n    // * key: [arrayType, 1] - key is a simple array of given type.\n    //   A shortcut is key: arrayType .. w/o the brackets.\n    // * key: [arrayType, num] - name is an array of arrays of num elements\n    //   arrayType has to be a typed array. If Array is to contain arrays,\n    //   they should be array objects of size num, not num elements from array.\n    // * key: [value, 0] - name is a constant value, not an array of values.\n\n    this.length = 0\n    this.size = 0\n    this.specs = {}\n    this.initSize = initSize\n    this.sizeDelta = sizeDelta\n    this.arrays = {}\n    this.initArrays(arraySpecs)\n  }\n  initArrays (arraySpecs) {\n    for (const key in arraySpecs) { // eslint-disable-line guard-for-in\n      let val = arraySpecs[key]\n      if (!Array.isArray(val)) val = [val, 1]\n      const [Type, elements] = val // type caps: a ctor\n      this.specs[key] = { Type, elements }\n\n      if (Type === Array && elements !== 1)\n        throw 'OofA initArrays: JavaScript Arrays must have \"elements\" = 1'\n\n      if (elements === 0)\n        this.arrays[key] = Type\n      else\n        this.arrays[key] = new Type(this.initSize * elements)\n    }\n    this.size = this.initSize\n  }\n\n  // Grow the TypedArrays by sizeDelta\n  extendArrays () {\n    this.size += this.sizeDelta\n    for (const key in this.arrays) { // eslint-disable-line guard-for-in\n      const { Type, elements } = this.specs[key]\n      if (elements === 0) continue\n\n      const array = this.arrays[key]\n      if (Type === Array) {\n        array[this.size - 1] = undefined // continue? sparse querks?\n      } else {\n        this.arrays[key] = new Type(this.size * elements)\n        this.arrays[key].set(array)\n      }\n    }\n  }\n\n  // Return the array names, the Object's keys.\n  arrayNames () { return Object.keys(this.arrays) }\n\n  // Get a subarray at the position ix for the array of arrays of the key\n  getSubArrayAt (ix, key) {\n    const array = this.arrays[key]\n    const { elements } = this.specs[key]\n    if (elements < 2)\n      throw `getSubArrayAt: ${key} not a subarray`\n    const start = ix * elements\n    const end = start + elements\n    return array.subarray(start, end)\n  }\n\n  // Set for the above.\n  setSubArrayAt (ix, key, val) {\n    const array = this.arrays[key]\n    const { elements } = this.specs[key]\n    if (elements < 2)\n      throw `setSubArrayAt: ${key} not a subarray`\n    if (val.length !== elements)\n      throw `setSubArrayAt: value not an array of ${elements} elements`\n    array.set(val, ix * elements)\n  }\n\n  // Get/Set values at ix for a given key. Can be constant, simple array,\n  // or array of subarrays.\n  getValueAt (ix, key) {\n    const { elements } = this.specs[key]\n    const array = this.arrays[key]\n    if (elements === 0) return array\n    if (elements === 1) return array[ix]\n    return this.getSubArrayAt(ix, key)\n  }\n  setValueAt (ix, key, val) {\n    const { elements } = this.specs[key]\n    const array = this.arrays[key]\n    if (elements === 0) { this.arrays[key] = val; return }\n    if (elements === 1) { array[ix] = val; return }\n    this.setSubArrayAt(ix, key, val)\n  }\n\n  // Get/Set/push all the values at a given index, ix, as an object.\n  // The arrayValues object uses the OofA keys. This is a \"slice\"\n  // of the OofA as an instance object\n  getObject (ix, obj = {}) {\n    // const obj = {}\n    for (const key in this.arrays) // eslint-disable-line guard-for-in\n      obj[key] = this.getValueAt(ix, key)\n    return obj\n  }\n  setObject (arrayValues, ix) {\n    for (const key in arrayValues) // eslint-disable-line guard-for-in\n      this.setValueAt(ix, key, arrayValues[key])\n  }\n  pushObject (arrayValues) {\n    if (this.length === this.size) this.extendArrays()\n    this.setObject(arrayValues, this.length)\n    this.length++\n  }\n\n  // An alternative technique for get/set values at a given indes.\n  // The getterSetter is an object using an index, ix, and getter/setters\n  // for each of the keys in the OofA.\n  //\n  // This makes the OofA mimic an AofO.\n  getterSetter () {\n    const obj = { ix: 0 }\n    const arrays = this.arrays\n    for (const key in arrays) { // eslint-disable-line guard-for-in\n      const { elements } = this.specs[key]\n      if (elements === 0)\n        Object.defineProperty(obj, key, {\n          get: () => arrays[key],\n          set: (val) => { arrays[key] = val }\n        })\n      if (elements === 1)\n        Object.defineProperty(obj, key, {\n          get: () => arrays[key][obj.ix],\n          set: (val) => { arrays[key][obj.ix] = val }\n        })\n      if (elements > 1)\n        Object.defineProperty(obj, key, {\n          get: () =>\n            arrays[key].subarray(obj.ix * elements, (obj.ix + 1) * elements),\n          set: (val) => arrays[key].set(val, obj.ix * elements)\n        })\n    }\n    return obj\n  }\n  accessor (gs, ix) {\n    gs.ix = ix; return gs\n  }\n}\n\nexport default OofA\n"]}