{"version":3,"sources":["../src/DataSet.js"],"names":[],"mappings":"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","file":"DataSet.js","sourcesContent":["import u from './util.js'\n\n// A **DataSet** is an object with width/height and an array\n// whose length = width * height\n//\n// The data array can be a TypedArray or a javascript Array\n// Note that it is very much like an ImageData object!\n\nclass DataSet {\n  // **Static methods:** called via DataSet.foo(), similar to Math.foo().\n  // Generally useful utilities for use with TypedArrays & JS Arrays\n\n  // Return an empty dataset of given width, height, datatype\n  static emptyDataSet (width, height, Type) {\n    return new DataSet(width, height, new Type(width * height))\n  }\n\n  // The **DataSet Class** constructor and methods\n\n  // constructor: Stores the three DataSet components.\n  // Checks data is right size, throws an error if not.\n  constructor (width, height, data) {\n    if (data.length !== width * height)\n      u.error(`new DataSet length: ${data.length} !== ${width} * ${height}`)\n    else\n      [this.width, this.height, this.data] = [width, height, data]\n  }\n\n  // Checks x,y are within DataSet. Throw error if not.\n  checkXY (x, y) {\n    if (!(u.between(x, 0, this.width - 1) && u.between(y, 0, this.height - 1)))\n      u.error(`DataSet.checkXY: x,y out of range: ${x}, ${y}`)\n  }\n\n  type () { return this.data.constructor }\n\n  // Given x,y in data space, return index into data\n  toIndex (x, y) { return x + (y * this.width) }\n\n  // Given index into data, return dataset [x, y] position\n  toXY (i) { return [i % this.width, Math.floor(i / this.width)] }\n\n  // Get dataset value at x,y, checking that x,y valid\n  getXY (x, y) { return this.data[this.toIndex(x, y)] }\n\n  // Set the data value at x,y to num\n  setXY (x, y, num) { this.data[this.toIndex(x, y)] = num }\n\n  // Wrapper for sampling, defaults to \"nearest\"\n  sample (x, y, useNearest = true) {\n    return useNearest ? this.nearest(x, y) : this.bilinear(x, y)\n  }\n\n  // Nearest neighbor sampling\n  nearest (x, y) {\n    this.checkXY(Math.round(x), Math.round(y))\n    return this.getXY(Math.round(x), Math.round(y))\n  }\n\n  // Billinear sampling\n  bilinear (x, y) {\n    // Billinear sampling works by making two linear interpolations (lerps)\n    // in the x direction, and a third in the y direction, between the\n    // two x results. See wikipedia:\n    // [bilinear sampling](http://en.wikipedia.org/wiki/Bilinear_interpolation)\n    // The diagram shows the three lerps\n    this.checkXY(x, y)\n    const [x0, y0] = [Math.floor(x), Math.floor(y)]\n    const i = this.toIndex(x0, y0)\n    const w = this.width\n    const [dx, dy] = [(x - x0), (y - y0)] // dx, dy = 0 if x, y on boundary\n    const [dx1, dy1] = [1 - dx, 1 - dy] // dx1, dy1 = 1 if x, y on boundary\n    const f00 = this.data[i]\n    // Edge case: fij is 0 if beyond data array; undefined -> 0.\n    // This cancels the given component's factor in the result.\n    const f10 = this.data[i + 1] || 0 // 0 at bottom right corner\n    const f01 = this.data[i + w] || 0 // 0 at all bottom row\n    const f11 = this.data[i + 1 + w] || 0 // 0 at end of next to bottom row\n    // This is a bit involved but:\n    // ```\n    // If dx = 0; dx1 = 1, dy != 0\n    // -> vertical linear interpolation\n    // fxy = f00(1-dy) + f01(dy) i.e. y-lerp\n    //\n    // If dx != 0; dy = 0, dx !=0\n    // -> horizontal linear interpolation\n    // fxy = f00(1-dx) + f10(dx) i.e. x-lerp\n    // ```\n    return (f00 * dx1 * dy1) + (f10 * dx * dy1) +\n           (f01 * dx1 * dy) + (f11 * dx * dy)\n  }\n\n  // Return a copy of this, with new data array\n  copy () {\n    return new DataSet(this.width, this.height, u.copyArray(this.data))\n  }\n\n  // Return new (empty) dataset of this type\n  emptyDataSet (width, height) {\n    return DataSet.emptyDataSet(width, height, this.type()) // see statics above\n  }\n\n  // Return new (empty) array of this type\n  emptyArray (length) {\n    const Type = this.type()\n    return new Type(length)\n  }\n\n  // Create new dataset of size width/height/type by resampling each point.\n  // Type is not this.type() due to integer/float differences. Default Array.\n  // If same size, return a copy of this.\n  resample (width, height, useNearest = true, Type = Array) {\n    if (width === this.width && height === this.height) return this.copy()\n    const ds = DataSet.emptyDataSet(width, height, Type)\n    const xScale = (this.width - 1) / (width - 1)\n    const yScale = (this.height - 1) / (height - 1)\n    for (let y = 0; y < height; y++)\n      for (let x = 0; x < width; x++)\n        ds.setXY(x, y, this.sample(x * xScale, y * yScale, useNearest))\n    return ds\n  }\n\n  // Return a rectangular subset of the dataset.\n  // Returned dataset is of same array type as this.\n  subset (x, y, width, height) {\n    if ((x + width) > this.width || (y + height) > this.height)\n      u.error('DataSet.subSet: params out of range')\n    const ds = this.emptyDataSet(width, height)\n    for (let i = 0; i < width; i++)\n      for (let j = 0; j < height; j++)\n        ds.setXY(i, j, this.getXY(i + x, j + y))\n    return ds\n  }\n\n  // Return maped dataset by applying f to each dataset element\n  map (f) {\n    return new DataSet(this.width, this.height, this.data.map(f))\n  }\n\n  // Return empty array of this dataset's type\n\n  // Return the column of data at position x as this array's type\n  col (x) {\n    const [w, h, data] = [this.width, this.height, this.data]\n    if (x >= w)\n      u.error(`col: x out of range width: ${w} x: ${x}`)\n    const colData = this.emptyArray(h)\n    for (let i = 0; i < h; i++)\n      colData[i] = data[x + i * w]\n    return colData\n  }\n\n  // Return the row of data at position y as this array's type\n  row (y) {\n    const [w, h] = [this.width, this.height]\n    if (y >= h)\n      u.error(`row: y out of range height: ${h} x: ${y}`)\n    return this.data.slice(y * w, (y + 1) * w)\n  }\n\n  // Return array converted to my data's Type.\n  // If array is my Type, return w/o conversion\n  toThisType (array) {\n    const type = this.type()\n    if (array.constructor === type) return array\n    return u.convertArray(array, type)\n  }\n\n  // Convert this dataset's data to new type. Precision may be lost.\n  // Does nothing if current data is already of this Type.\n  convertType (type) {\n    if (this.type() === type) return\n    this.data = u.convertArray(this.data, type)\n  }\n\n  // Concatinate a dataset of equal height to my right to my east.\n  // New DataSet is of same type as this.\n  //\n  // Note: concatWest is dataset.concatEast(this)\n  concatEast (ds) {\n    const [w, h] = [this.width, this.height]\n    const [w1, h1] = [ds.width, ds.height]\n    if (h !== h1)\n      u.error(`concatEast: heights not equal ${h}, ${h1}`)\n    const ds1 = this.emptyDataSet((w + w1), h)\n    for (let x = 0; x < h; x++) // copy this into new dataset\n      for (let y = 0; y < w; y++)\n        ds1.setXY(x, y, this.getXY(x, y))\n    for (let x = 0; x < h1; x++) // copy ds to the left side\n      for (let y = 0; y < w1; y++)\n        ds1.setXY(x + w, y, ds.getXY(x, y))\n    return ds1\n  }\n\n  // Concatinate a dataset of equal width to my south, returning new DataSet.\n  // New DataSet is of same type as this.\n  //\n  // Note: concatNorth is dataset.concatSouth(this)\n  concatSouth (dataset) {\n    const [w, h, data] = [this.width, this.height, this.data]\n    if (w !== dataset.width)\n      u.error(`concatSouth: widths not equal ${w}, ${dataset.width}`)\n    const data1 = u.concatArrays(data, dataset.data)\n    return new DataSet(w, h + dataset.height, data1)\n  }\n\n  // return dataset x,y given x,y in a euclidean space defined by tlx, tly, w, h\n  // x,y is in topleft-bottomright box: [tlx,tly,tlx+w,tly-h], y positive up\n  // Ex: NetLogo's coords: x, y, minXcor, maxYcor, numX, numY\n  transformCoords (x, y, tlx, tly, w, h) {\n    const xs = (x - tlx) * (this.width - 1) / w\n    const ys = (tly - y) * (this.height - 1) / h\n    return [xs, ys]\n  }\n\n  // get a sample using a transformed euclidean coord system; see above\n  coordSample (x, y, tlx, tly, w, h, useNearest = true) {\n    const [xs, ys] = this.transformCoords(x, y, tlx, tly, w, h)\n    return this.sample(xs, ys, useNearest)\n  }\n\n  // Return Array 3x3 neighbor values of the given x,y of the dataset.\n  // Off-edge neighbors revert to nearest edge value.\n  neighborhood (x, y, array = []) {\n    array.length = 0  // in case user supplied an array\n    for (let dy = -1; dy <= +1; dy++) {\n      for (let dx = -1; dx <= +1; dx++) {\n        const x0 = u.clamp(x + dx, 0, this.width - 1)\n        const y0 = u.clamp(y + dy, 0, this.height - 1)\n        array.push(this.data[this.toIndex(x0, y0)])\n      }\n    }\n    return array\n  }\n\n  // Return a new Array dataset convolved with the given kernel 3x3 matrix.\n  // See [Convolution article](https://goo.gl/gCfXmU)\n  //\n  // If cropped, do not convolve the edges, returning a smaller dataset.\n  // If not, convolve the edges by extending edge values, returning\n  // dataset of same size.\n  //\n  // Use ds.convertType to convert to typed array\n  convolve (kernel, factor = 1, crop = false) {\n    const array = [] // new convolved data\n    const n = [] // the current neighborhood\n    const [x0, y0, h, w] = crop\n      ? [1, 1, this.height - 1, this.width - 1]\n      : [0, 0, this.height, this.width]\n    for (let y = y0; y < h; y++) {\n      for (let x = x0; x < w; x++) {\n        this.neighborhood(x, y, n)\n        array.push(u.aSum(u.aPairMul(kernel, n)) * factor)\n      }\n    }\n    return new DataSet(w - x0, h - y0, array)\n  }\n\n  // A few common convolutions.  dzdx/y are also called horiz/vert Sobel\n  dzdx (n = 2, factor = 1 / 8) {\n    return this.convolve([-1, 0, 1, -n, 0, n, -1, 0, 1], factor)\n  }\n  dzdy (n = 2, factor = 1 / 8) {\n    return this.convolve([1, n, 1, 0, 0, 0, -1, -n, -1], factor)\n  }\n  laplace8 () {\n    return this.convolve([-1, -1, -1, -1, 8, -1, -1, -1, -1])\n  }\n  laplace4 () {\n    return this.convolve([0, -1, 0, -1, 4, -1, 0, -1, 0])\n  }\n  blur (factor = 0.0625) { // 1/16 = 0.0625\n    return this.convolve([1, 2, 1, 2, 4, 2, 1, 2, 1], factor)\n  }\n  edge () {\n    return this.convolve([1, 1, 1, 1, -7, 1, 1, 1, 1])\n  }\n\n  // Create two new Array convolved datasets, slope and aspect, common in\n  // the use of an elevation data set. See Esri tutorials for\n  // [slope](http://goo.gl/ZcOl08) and [aspect](http://goo.gl/KoI4y5)\n  //\n  // It also returns the two derivitive DataSets, dzdx, dzdy for\n  // those wanting to use the results of the two convolutions.\n  //\n  // Use this.convertType to convert to typed array\n  slopeAndAspect (cellSize = 1, noNaNs = true, posAngle = true) {\n    const dzdx = this.dzdx() // sub left z from right\n    const dzdy = this.dzdy() // sub bottom z from top\n    let [aspect, slope] = [[], []]\n    const [h, w] = [dzdx.height, dzdx.width]\n    for (let y = 0; y < h; y++) {\n      for (let x = 0; x < w; x++) {\n        let [gx, gy] = [dzdx.getXY(x, y), dzdy.getXY(x, y)]\n        slope.push(Math.atan(u.distance(gx, gy)) / cellSize) // radians\n        if (noNaNs)\n          while (gx === gy) {\n            gx += u.randomNormal(0, 0.0001); gy += u.randomNormal(0, 0.0001)\n          }\n        // radians in [-PI,PI], downhill\n        let rad = (gx === gy && gy === 0) ? NaN : Math.atan2(-gy, -gx)\n        // positive radians in [0,2PI] if desired\n        if (posAngle && rad < 0) rad += 2 * Math.PI\n        aspect.push(rad)\n      }\n    }\n    slope = new DataSet(w, h, slope)\n    aspect = new DataSet(w, h, aspect)\n    return { slope, aspect, dzdx, dzdy }\n  }\n\n  // Convert dataset to an image context object.\n  //\n  // This can be used to \"visualize\" the data by normalizing\n  // which will scale the data to use the entire RGB space.\n  // It can also be used to create tiles or image-as-data if\n  // the defaults are used.\n  //\n  // Due to\n  // [alpha-premultiply](https://en.wikipedia.org/wiki/Alpha_compositing),\n  // the best we can do as data is 24 bit ints.\n  // You can simulate floats/fixed by multiplying the dataset\n  // the dividing on conversion back.\n  //\n  // Our preferred transport is in the works, likely in the\n  // tile datasets via blobs or arraybuffers. Sigh.\n  toContext (normalize = false, gray = false, alpha = 255) {\n    const [w, h, data] = [this.width, this.height, this.data]\n    let idata\n    if (normalize) {\n      idata = gray\n        ? u.normalize8(data) : u.normalizeInt(data, 0, Math.pow(2, 24) - 1)\n    } else {\n      idata = data.map((a) => Math.round(a))\n    }\n    const ctx = u.createCtx(w, h)\n    const id = ctx.getImageData(0, 0, w, h)\n    const ta = id.data // ta short for typed array\n    for (let i = 0; i < idata.length; i++) {\n      const [num, j] = [idata[i], 4 * i] // j = byte index into ta\n      if (gray) {\n        ta[j] = ta[j + 1] = ta[j + 2] = Math.floor(num); ta[j + 3] = alpha\n      } else {\n        ta[j] = (num >> 16) & 0xff\n        ta[j + 1] = (num >> 8) & 0xff\n        ta[j + 2] = num & 0xff\n        ta[j + 3] = alpha // if not 255, image will be premultiplied.\n      }\n    }\n    ctx.putImageData(id, 0, 0)\n    return ctx\n  }\n\n  // Convert dataset to a canvas, which can be used as an image\n  toCanvas (normalize = false, gray = false, alpha = 255) {\n    return this.toContext(gray, normalize, alpha).canvas\n  }\n  // Convert dataset to a base64 string\n  toDataUrl (normalize = false, gray = false, alpha = 255) {\n    return u.ctxToDataUrl(this.toContext(gray, normalize, alpha))\n  }\n\n  // Import an image as a dataset via it\n\n}\n\nexport default DataSet\n"]}