{"version":3,"sources":["../src/ColorMap.js"],"names":[],"mappings":"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","file":"ColorMap.js","sourcesContent":["import util from './util.js'\nimport Color from './Color.js'\n\n// A colormap is simply an array of typedColors with a few utilities such\n// as randomColor etc. This allows the colors to be simple integer indices\n// into the Array.\n\nconst ColorMap = {\n  // ### Color Array Utilities\n  // Several utilities for creating color arrays\n\n  // ### Gradients\n\n  // Ask the browser to use the canvas gradient feature\n  // to create nColors given the gradient color stops and locs.\n  // See Mozilla [Gradient Doc](\n  //   https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient),\n  //\n  // Stops are css strings or rgba arrays.\n  // Locs are floats from 0-1, default is equally spaced.\n  //\n  // This is a powerful browser feature, can be\n  // used to create all the MatLab colormaps.\n  // See these gradient sites:\n  // Colorzilla [Gradient Editor](\n  //   http://www.colorzilla.com/gradient-editor/),\n  // GitHub [ColorMap Project](\n  //   https://github.com/bpostlethwaite/colormap)\n  gradientImageData (nColors, stops, locs) {\n    // Convert the color stops to css strings\n    stops = stops.map((c) => Array.isArray(c) ? Color.rgbaString(...c) : c)\n    const ctx = util.createCtx(nColors, 1)\n    // Install default locs if none provide\n    if (!locs) locs = util.aRamp(0, 1, stops.length)\n    // create a new gradient and fill it with the color stops\n    const grad = ctx.createLinearGradient(0, 0, nColors, 0)\n    util.repeat(stops.length, (i) => grad.addColorStop(locs[i], stops[i]))\n    // draw the gradient returning the image data TypedArray\n    ctx.fillStyle = grad\n    ctx.fillRect(0, 0, nColors, 1)\n    return util.ctxToImageData(ctx).data\n  },\n\n  // ### Array Conversion Utilities\n\n  // Convert Uint8Array into Array of 4 element typedColors.\n  // Useful for converting ImageData objects like gradients to colormaps.\n  // WebGL ready: the array.typedArray is suitable for Attribute Buffers\n  typedArrayToTypedColors (typedArray) {\n    const array = []\n    util.step(typedArray.length, 4,\n      (i) => array.push(Color.typedColor(typedArray.subarray(i, i + 4))))\n    array.typedArray = typedArray\n    return array\n  },\n  // Convert an Array of Arrays to an Array of typedColors\n  // Webgl ready as above.\n  arrayToColors (array) {\n    const typedArray = new Uint8ClampedArray(array.length * 4)\n    util.repeat(array.length, (i) => {\n      const a = array[i]\n      if (a.length === 3) a.push(255)\n      typedArray.set(a, i * 4)\n    })\n    return this.typedArrayToTypedColors(typedArray)\n  },\n\n  // Permute the values of 3 arrays. Ex:\n  //\n  // [1,2], [3], [4,5] -> [ [1,3,4],[1,3,5],[2,3,4],[2,3,5] ]\n  permuteArrays (A1, A2 = A1, A3 = A1) {\n    const array = []\n    for (let a1 of A1)\n      for (let a2 of A2)\n        for (let a3 of A3)\n          array.push([a1, a2, a3])\n    return array\n  },\n\n  // Use permuteArrays to create uniformly spaced color ramp permutation.\n  // Ex: if numRs is 3, permuteArrays's A1 would be [0, 127, 255]\n  permuteRGBColors (numRs, numGs = numRs, numBs = numRs) {\n    const toRamp = (num) => util.aIntRamp(0, 256, num)\n    const ramps = [numRs, numGs, numBs].map(toRamp)\n    return this.permuteArrays(...ramps)\n  },\n\n  // ### ColorMaps\n\n  // ColorMaps are Arrays of TypedColors with these methods.\n  // Webgl ready if made with typedArrayToTypedColors or arrayToColors above.\n  ColorMapProto: {\n    __proto__: Array.prototype,\n    // Create a [sparse array](https://goo.gl/lQlq5k) of index[pixel] = pixel.\n    // Used by lookup below for exact match of a color within the colormap.\n    createIndex () {\n      this.index = []\n      util.repeat(this.length, (i) => {\n        const px = this[i].getPixel()\n        this.index[px] = i\n      })\n    },\n    // Return a random index into the colormap array\n    randomIndex () { return util.randomInt(this.length) },\n    // Return a random color within the colormap\n    randomColor () { return this[this.randomIndex()] },\n    // Return the index of a color within the colormap, undefined if no match.\n    lookup (color) {\n      if (this.index) return this.index[color.getPixel()]\n      for (let i = 0; i < this.length; i++)\n        if (color.equals(this[i])) return i\n      return undefined\n    },\n    // Return color scaled by number within [min, max].\n    // A linear interpolation (util.lerp) in [0, length-1]\n    //\n    // Ex: scaleColor(25, 0, 50) returns the color in the middle of the colormap\n    scaleColor (number, min, max) {\n      // number = util.clamp(number, min, max)\n      const scale = util.lerpScale(number, min, max)\n      const index = Math.round(util.lerp(0, this.length - 1, scale))\n      return this[index]\n    },\n    // Return the typedArray used to create the typedColors,\n    // undefined if not webgl ready.\n    webglArray () { return this.typedArray }\n    // findClosestIndex: function(r, g, b, a) {\n    //   var b0, bLoc, c, color, d, g0, gLoc, i, ix, ixMin, j, len, minDist, r0, rLoc, ref, ref1, ref2, step;\n    //   if (a == null) {\n    //     a = 255;\n    //   }\n    //   if (g == null) {\n    //     ref = Color.colorToArray(r), r = ref[0], g = ref[1], b = ref[2], a = ref[3];\n    //   }\n    //   if (this.cube) {\n    //     step = 255 / (this.cube - 1);\n    //     ref1 = (function() {\n    //       var j, len, ref1, results;\n    //       ref1 = [r, g, b];\n    //       results = [];\n    //       for (j = 0, len = ref1.length; j < len; j++) {\n    //         c = ref1[j];\n    //         results.push(Math.round(c / step));\n    //       }\n    //       return results;\n    //     })(), rLoc = ref1[0], gLoc = ref1[1], bLoc = ref1[2];\n    //     return rLoc + gLoc * this.cube + bLoc * this.cube * this.cube;\n    //   }\n    //   if (ix = this.lookup([r, g, b, a])) {\n    //     return ix;\n    //   }\n    //   minDist = Infinity;\n    //   ixMin = 0;\n    //   for (i = j = 0, len = this.length; j < len; i = ++j) {\n    //     color = this[i];\n    //     ref2 = Color.colorToArray(color), r0 = ref2[0], g0 = ref2[1], b0 = ref2[2];\n    //     d = Color.rgbDistance(r0, g0, b0, r, g, b);\n    //     if (d < minDist) {\n    //       minDist = d;\n    //       ixMin = i;\n    //     }\n    //   }\n    //   return ixMin;\n    // },\n    // findClosestColor: function(r, g, b, a) {\n    //   if (a == null) {\n    //     a = 255;\n    //   }\n    //   return this[this.findClosestIndex(r, g, b, a)];\n    // }\n  },\n  // Convert an array of rgb(a) arrays to a webgl-ready colormap.\n  basicColorMap (array) {\n    array = this.arrayToColors(array)\n    util.setPrototypeOf(array, this.ColorMapProto)\n    return array\n  }\n\n}\n\nexport default ColorMap\n"]}