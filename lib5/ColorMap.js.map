{"version":3,"sources":["../src/ColorMap.js"],"names":[],"mappings":"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","file":"ColorMap.js","sourcesContent":["// A colormap is simply an array of typedColors with a few utilities such\n// as randomColor etc. This allows the colors to be simple integer indices\n// into the Array. They are also designed to be webgl-ready, being a\n// GLSL \"Uniform\" variable TypedArray for colors.\n\nimport util from './util.js'\nimport Color from './Color.js'\n\nconst ColorMap = {\n  // ### Color Array Utilities\n  // Several utilities for creating color arrays\n\n  // ### Gradients\n\n  // Ask the browser to use the canvas gradient feature\n  // to create nColors given the gradient color stops and locs.\n  // See Mozilla [Gradient Doc](\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient),\n  //\n  // This is a powerful browser feature, can be\n  // used to create all the MatLab colormaps.\n  //\n  // Stops are css strings or rgba arrays.\n  // Locs are floats from 0-1, default is equally spaced.\n  gradientImageData (nColors, stops, locs) {\n    // Convert the color stops to css strings\n    stops = stops.map((c) => Array.isArray(c) ? Color.rgbaString(...c) : c)\n    const ctx = util.createCtx(nColors, 1)\n    // Install default locs if none provide\n    if (!locs) locs = util.aRamp(0, 1, stops.length)\n    // Create a new gradient and fill it with the color stops\n    const grad = ctx.createLinearGradient(0, 0, nColors, 0)\n    util.repeat(stops.length, (i) => grad.addColorStop(locs[i], stops[i]))\n    // Draw the gradient, returning the image data TypedArray\n    ctx.fillStyle = grad\n    ctx.fillRect(0, 0, nColors, 1)\n    return util.ctxToImageData(ctx).data\n  },\n\n  // ### Array Conversion Utilities\n\n  // Convert a Uint8Array into Array of 4 element typedColors.\n  // Useful for converting ImageData objects like gradients to colormaps.\n  // WebGL ready: the array.typedArray is suitable for Uniforms.\n  typedArrayToTypedColors (typedArray) {\n    const array = []\n    util.step(typedArray.length, 4,\n      (i) => array.push(Color.typedColor(typedArray.subarray(i, i + 4))))\n    array.typedArray = typedArray\n    return array\n  },\n  // Convert an Array of Arrays to an Array of typedColors.\n  // Webgl ready as above.\n  arraysToColors (array) {\n    const typedArray = new Uint8ClampedArray(array.length * 4)\n    util.repeat(array.length, (i) => {\n      const a = array[i]\n      if (a.length === 3) a.push(255)\n      typedArray.set(a, i * 4)\n    })\n    return this.typedArrayToTypedColors(typedArray)\n  },\n\n  // Permute the values of 3 arrays. Ex:\n  //\n  // [1,2],[3],[4,5] -> [ [1,3,4],[1,3,5],[2,3,4],[2,3,5] ]\n  permuteArrays (A1, A2 = A1, A3 = A1) {\n    const array = []\n    for (const a1 of A1) // sorta odd const works with ths, but...\n      for (const a2 of A2)\n        for (const a3 of A3)\n          array.push([a1, a2, a3])\n    return array\n  },\n  // Use permuteArrays to create uniformly spaced color ramp permutation.\n  // Ex: if numRs is 3, permuteArrays's A1 would be [0, 127, 255]\n  permuteRGBColors (numRs, numGs = numRs, numBs = numRs) {\n    const toRamp = (num) => util.aIntRamp(0, 256, num)\n    const ramps = [numRs, numGs, numBs].map(toRamp)\n    return this.permuteArrays(...ramps)\n  },\n\n  // ### ColorMaps\n\n  // ColorMaps are Arrays of TypedColors with these methods.\n  // Webgl ready if made with typedArrayToTypedColors or arraysToColors above.\n  ColorMapProto: {\n    __proto__: Array.prototype,\n    // Create a [sparse array](https://goo.gl/lQlq5k) of index[pixel] = pixel.\n    // Used by lookup below for exact match of a color within the colormap.\n    createIndex () {\n      this.index = []\n      util.repeat(this.length, (i) => {\n        const px = this[i].getPixel()\n        this.index[px] = i\n        if (this.cssNames) this.index[this.cssNames[i]] = i\n      })\n    },\n    // Return a random index into the colormap array\n    randomIndex () { return util.randomInt(this.length) },\n    // Return a random color within the colormap\n    randomColor () { return this[this.randomIndex()] },\n    // Return the index of a color within the colormap, undefined if no match.\n    lookup (color) {\n      if (this.index) return this.index[color.getPixel()]\n      for (let i = 0; i < this.length; i++)\n        if (color.equals(this[i])) return i\n      return undefined\n    },\n    // Return color scaled by number within [min, max].\n    // A linear interpolation (util.lerp) in [0, length-1]\n    //\n    // Ex: scaleColor(25, 0, 50) returns the color in the middle of the colormap\n    scaleColor (number, min, max) {\n      const scale = util.lerpScale(number, min, max)\n      const index = Math.round(util.lerp(0, this.length - 1, scale))\n      return this[index]\n    },\n    // Return the typedArray used to create the typedColors,\n    // undefined if not webgl ready.\n    webglArray () { return this.typedArray },\n\n    // Debugging: Return a string with length and array of colors\n    toString () { return `${this.length} ${util.arraysToString(this)}` },\n\n    // Return the index of the color with the min rgbDistance from r, g, b\n    rgbClosestIndex (r, g, b) {\n      let minDist = Infinity\n      let ixMin = 0\n      for (var i = 0; i < this.length; i++) {\n        const d = this[i].rgbDistance(r, g, b)\n        if (d < minDist) {\n          minDist = d\n          ixMin = i\n          if (d === 0) return ixMin\n        }\n      }\n      return ixMin\n    },\n    // Return the color with the min rgbDistance from r, g, b\n    rgbClosestColor (r, g, b) { return this[this.rgbClosestIndex(r, g, b)] }\n\n    // findClosestIndex: function(r, g, b, a) {\n    //   var b0, bLoc, c, color, d, g0, gLoc, i, ix, ixMin, j, len, minDist, r0, rLoc, ref, ref1, ref2, step;\n    //   if (a == null) {\n    //     a = 255;\n    //   }\n    //   if (g == null) {\n    //     ref = Color.colorToArray(r), r = ref[0], g = ref[1], b = ref[2], a = ref[3];\n    //   }\n    //   if (this.cube) {\n    //     step = 255 / (this.cube - 1);\n    //     ref1 = (function() {\n    //       var j, len, ref1, results;\n    //       ref1 = [r, g, b];\n    //       results = [];\n    //       for (j = 0, len = ref1.length; j < len; j++) {\n    //         c = ref1[j];\n    //         results.push(Math.round(c / step));\n    //       }\n    //       return results;\n    //     })(), rLoc = ref1[0], gLoc = ref1[1], bLoc = ref1[2];\n    //     return rLoc + gLoc * this.cube + bLoc * this.cube * this.cube;\n    //   }\n    //   if (ix = this.lookup([r, g, b, a])) {\n    //     return ix;\n    //   }\n    //   minDist = Infinity;\n    //   ixMin = 0;\n    //   for (i = j = 0, len = this.length; j < len; i = ++j) {\n    //     color = this[i];\n    //     ref2 = Color.colorToArray(color), r0 = ref2[0], g0 = ref2[1], b0 = ref2[2];\n    //     d = Color.rgbDistance(r0, g0, b0, r, g, b);\n    //     if (d < minDist) {\n    //       minDist = d;\n    //       ixMin = i;\n    //     }\n    //   }\n    //   return ixMin;\n    // },\n    // findClosestColor: function(r, g, b, a) {\n    //   if (a == null) {\n    //     a = 255;\n    //   }\n    //   return this[this.findClosestIndex(r, g, b, a)];\n    // }\n  },\n  // Convert an array of rgb(a) Arrays or TypedColors to a webgl-ready colormap.\n  basicColorMap (colors) {\n    colors = this.arraysToColors(colors)\n    util.setPrototypeOf(colors, this.ColorMapProto)\n    return colors\n  },\n  // Create a gray map (gray: r=g=b)\n  // These are typically 256 entries but can be smaller\n  // by passing a size parameter.\n  grayColorMap (size = 256) {\n    const ramp = util.aIntRamp(0, 255, size)\n    return this.basicColorMap(ramp.map((i) => [i, i, i]))\n  },\n\n  // Create a colormap by permuted rgb values.\n  //\n  // numRs, numGs, numBs are numbers, the number of steps beteen 0-255.\n  // Ex: numRs = 3, corresponds to 0, 128, 255.\n  // Note the defaults: rgbColorCube(6) creates a `6 * 6 * 6` cube.\n  rgbColorCube (numRs, numGs = numRs, numBs = numRs) {\n    const array = this.permuteRGBColors(numRs, numGs, numBs)\n    const map = this.basicColorMap(array)\n    // Save the parameters for fast color calculations.\n    map.cube = [numRs, numGs, numBs]\n    return map\n  },\n  // Create a colormap by permuting the values of the given arrays.\n  // Similar to above but with arrays that may have arbitrary values.\n  rgbColorMap (R, G, B) {\n    const array = this.permuteArrays(R, G, B)\n    return this.basicColorMap(array)\n  },\n\n  // Create an hsl map, inputs are arrays to be permutted like rgbColorMap.\n  // Convert the HSL values to typedColors, default to bright hue ramp (L=50).\n  hslColorMap (H, S = [100], L = [50]) {\n    const hslArray = this.permuteArrays(H, S, L)\n    const array = hslArray.map(a => Color.toTypedColor(Color.hslString(...a)))\n    return this.basicColorMap(array)\n  },\n\n  // Use gradient to build an rgba array, then convert to colormap.\n  // Stops are css strings or rgba arrays.\n  // locs defaults to evenly spaced, probably what you want.\n  //\n  // This easily creates all the MatLab colormaps like \"jet\" below.\n  gradientColorMap (nColors, stops, locs) {\n    const uint8arrays = this.gradientImageData(nColors, stops, locs)\n    const typedColors = this.typedArrayToTypedColors(uint8arrays)\n    util.setPrototypeOf(typedColors, this.ColorMapProto)\n    return typedColors\n  },\n  // The most popular MatLab gradient, \"jet\":\n  jetColors: [ [0, 0, 127], [0, 0, 255], [0, 127, 255], [0, 255, 255],\n    [127, 255, 127], [255, 255, 0], [255, 127, 0], [255, 0, 0], [127, 0, 0] ],\n  // Two other popular MatLab 'ramp' gradients are:\n  // * One color: from black/white to color, optionally back to white/black.\n  // stops = ['black', 'red'] or ['white', 'orange', 'black']\n  // The NetLogo map is a concatenation of 14 of these.\n  // * Two colors: stops = ['red', 'orange'] (blends the tow, center is white)\n\n  // The 16 unique [CSS Color Names](https://goo.gl/sxo36X), case insensitive.\n  // Aqua == Cyan and Fuchsia == Magenta, 18 total color names.\n  // These sorted by hue/saturation/light, hue in 0-300 degrees.\n  // See [Mozilla Color Docs](https://goo.gl/tolSnS) for *lots* more!\n  basicColorNames: 'white silver gray black red maroon yellow olive lime green aqua cyan teal blue navy fuchsia magenta purple'.split(' '),\n  // Create a named colors colormap\n  cssColorMap (cssArray) {\n    const array = cssArray.map(str => Color.stringToUint8s(str))\n    const map = this.basicColorMap(array)\n    map.cssNames = cssArray\n    return map\n  }\n\n}\n\nexport default ColorMap\n"]}