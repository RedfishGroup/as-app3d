{"version":3,"sources":["../src/AgentSet.js"],"names":[],"mappings":"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","file":"AgentSet.js","sourcesContent":["import util from './util.js'\n\n// AgentSets are arrays that are factories for their agents/objects.\n// They are the base for Patches, Turtles and Links.\n\nconst AgentSet = {\n  // ### Array-like Methods\n\n  // AgentSet \"class method\": Convert an array to an agentset.\n  // This is a constructor for an AgentSet.\n  // It also is used in AgentSet methods which call an Array function\n  // returning a new Array, to turn it back into an AgentSet.\n  // See clone() below.\n  AsSet (array, set = AgentSet) {\n    if (this.hasOwnProperty('length'))\n      util.error('AsSet: called from AgentSet method, use this.asSet')\n    return util.setPrototypeOf(array, set)\n  },\n  // AgentSet method to convert an array to the same AgentSet type as this's.\n  // Always called with \"this\": this.asSet(array). Mainly used when\n  // an AgentSet method calls this.someArrayMethod which returns a new array.\n  asSet (array) {\n    if (!this.hasOwnProperty('length'))\n      util.error('asSet: not called from AgentSet method, use AgentSet.AsSet')\n    return AgentSet.AsSet(array, Object.getPrototypeOf(this))\n  },\n\n  // Return true if there are no items in this set, false if not empty.\n  empty () { return this.length === 0 },\n  // Return !empty()\n  any () { return this.length !== 0 },\n  // Return last item in this array. Returns undefined if empty.\n  last () { return this[ this.length - 1 ] },\n  // Return true if reporter true for all of this set's objects\n  all (reporter) { return this.every(reporter) },\n\n  // Return shallow copy of a protion of this agentset\n  // [See Array.slice](https://goo.gl/Ilgsok)\n  // Default is to clone entire agentset\n  clone (begin = 0, end = this.length) {\n    return this.asSet(this.slice(begin, end))\n  },\n  // Return this agentset sorted by the reporter in ascending/descending order.\n  // If reporter is a string, convert to a fcn returning that property\n  sortBy (reporter, ascending = true) {\n    util.sortObjs(this, reporter, ascending)\n    return this\n  },\n\n  // Return a random agent. Return undefined if empty.\n  oneOf () { return this[ util.randomInt(this.length) ] },\n  // Return the first agent having the min/max of given value of f(agent).\n  // If reporter is a string, convert to a fcn returning that property\n  minOrMaxOf (min, reporter) {\n    if (this.empty()) util.error('min/max OneOf: empty array')\n    if (typeof reporter === 'string') reporter = util.propFcn(reporter)\n    let o = null\n    let val = min ? Infinity : -Infinity\n    for (let i = 0; i < this.length; i++) {\n      let a = this[i]\n      let aval = reporter(a)\n      if ((min && (aval < val)) || (!min && (aval > val)))\n        [o, val] = [a, aval]\n    }\n    return o\n  },\n  // The min version of the above\n  minOneOf (reporter) { return this.minOrMaxOf(true, reporter) },\n  // The max version of the above\n  maxOneOf (reporter) { return this.minOrMaxOf(false, reporter) },\n\n  // Return n random agents.\n  // See [Fisher-Yates-Knuth shuffle](https://goo.gl/fWNFf)\n  // for better approach for large n.\n  nOf (n) { // I realize this is a bit silly, lets hope random doesn't repeat!\n    if (n > this.length) util.error('nOf: n larger than agentset')\n    if (n === this.length) return this\n    const result = []\n    while (result.length < n) {\n      const o = this.oneOf()\n      if (!(o in result)) result.push(o)\n    }\n    return result\n  },\n  // Return a new agentset of the n min/max agents of the value of reporter,\n  // in ascending order.\n  // If reporter is a string, convert to a fcn returning that property\n  // Note we do not manage ties, see NetLogo docs.\n  minOrMaxNOf (min, n, reporter) {\n    if (n > this.length) util.error('min/max nOf: n larger than agentset')\n    const as = this.clone().sortBy(reporter)\n    return min ? as.clone(0, n) : as.clone(as.length - n)\n  },\n  minNOf (n, reporter) { return this.minOrMaxNOf(true, n, reporter) },\n  maxNOf (n, reporter) { return this.minOrMaxNOf(false, n, reporter) }\n\n}\nutil.setPrototypeOf(AgentSet, Array.prototype)\n\n// AgentSet.__proto__ = Array.prototype\n\nexport default AgentSet\n"]}