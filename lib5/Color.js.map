{"version":3,"sources":["../src/Color.js"],"names":[],"mappings":"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","file":"Color.js","sourcesContent":["import util from './util.js'\n\nconst Color = {\n\n// ### CSS Color Strings.\n\n  // CSS colors in HTML are strings, see [Mozillas Color Reference](\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/color_value),\n  // taking one of 7 forms:\n  //\n  // * Names: [140 color case-insensitive names](\n  //   http://en.wikipedia.org/wiki/Web_colors#HTML_color_names) like\n  //   Red, Green, CadetBlue, etc.\n  // * Hex, short and long form: #0f0, #ff10a0\n  // * RGB: rgb(255, 0, 0), rgba(255, 0, 0, 0.5)\n  // * HSL: hsl(120, 100%, 50%), hsla(120, 100%, 50%, 0.8)\n  //\n  // See [this wikipedia article]\n  // (http://en.wikipedia.org/wiki/HSL_and_HSV#Swatches)\n  // on differences between HSL and HSB/HSV.\n\n  // Convert 4 r,g,b,a ints in [0-255] to a css color string.\n  // Alpha \"a\" is int in [0-255], not float in 0-1\n  rgbaString (r, g, b, a = 255) {\n    a = a / 255; let a4 = a.toPrecision(4)\n    return (a === 1) ? `rgb(${r},${g},${b})` : `rgba(${r},${g},${b},${a4})`\n  },\n\n  // Convert 3 ints, h in [0-360], s,l in [0-100]% to a css color string.\n  // Alpha \"a\" is int in [0-255].\n  //\n  // Note h=0 and h=360 are the same, use h in 0-359 for unique colors.\n  hslString (h, s, l, a = 255) {\n    a = a / 255; let a4 = a.toPrecision(4)\n    return (a === 1) ? `hsl(${h},${s}%,${l}%)` : `hsla(${h},${s}%,${l}%,${a4})`\n  },\n\n  // Return a web/html/css hex color string for an r,g,b opaque color (a=255)\n  //\n  // Both #nnn and #nnnnnn forms supported.\n  // Default is to check for the short hex form: #nnn.\n  hexString (r, g, b, shortOK = true) {\n    if (shortOK) {\n      const [r0, g0, b0] = [r / 17, g / 17, b / 17]\n      if (util.isInteger(r0) && util.isInteger(g0) && util.isInteger(b0))\n        return this.hexShortString(r0, g0, b0)\n    }\n    return `#${(0x1000000 | (b | g << 8 | r << 16)).toString(16).slice(-6)}`\n  },\n  // Return the 4 char short version of a hex color.  Each of the r,g,b values\n  // must be in [0-15].  The resulting color will be equivalent\n  // to `r*17`, `g*17`, `b*17`, resulting in the values:\n  //\n  //     0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255\n  //\n  // This is equivalent util.aRamp(0,255,16), i.e. 16 values per rgb channel.\n  hexShortString (r, g, b) {\n    if ((r > 15) || (g > 15) || (b > 15)) {\n      util.error(`hexShortString: one of ${[r, g, b]} > 15`)\n    }\n    return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`\n  },\n\n  // This is a hybrid string and generally our default.  It returns:\n  //\n  // * rgbaString if a not 255 (i.e. not opaque)\n  // * hexString otherwise\n  // * with the hexShortString if appropriate\n  triString (r, g, b, a = 255) {\n    // if (a === 255) { return this.hexString(r, g, b, true) } else { return this.rgbaString(r, g, b, a) }\n    return (a === 255) ? // eslint-disable-line\n      this.hexString(r, g, b, true) : this.rgbaString(r, g, b, a)\n  },\n\n// ### CSS String Conversions\n\n  // Return 4 element array given any legal CSS string color.\n  //\n  // Legal strings vary widely: CadetBlue, #0f0, rgb(255,0,0), hsl(120,100%,50%)\n  //\n  // Note: The browser speaks for itself: we simply set a 1x1 canvas fillStyle\n  // to the string and create a pixel, returning the r,g,b,a TypedArray.\n\n  // The shared 1x1 canvas 2D context.\n  sharedCtx1x1: util.createCtx(1, 1), // share across calls.\n  // Convert any css string to TypedArray.\n  // If you need a JavaScript Array, use util.convertArray(array, Array)\n  stringToUint8s (string) {\n    this.sharedCtx1x1.fillStyle = string\n    this.sharedCtx1x1.fillRect(0, 0, 1, 1)\n    return this.sharedCtx1x1.getImageData(0, 0, 1, 1).data\n  },\n\n// ### Pixel Colors.\n\n  // Primitive Rgba <-> Pixel manipulation.\n  //\n  // These use two views onto a 4 byte TypedArray buffer.\n  //\n  // These shared values are initialized at end of Color,\n  // see why at [Stack Overflow](http://goo.gl/qrHXwB)\n  sharedPixel: null,\n  sharedUint8s: null,\n\n  // Convert r,g,b,a to a single Uint32 pixel, correct endian format.\n  rgbaToPixel (r, g, b, a = 255) {\n    this.sharedUint8s.set([r, g, b, a])\n    return this.sharedPixel[0]\n  },\n\n  // Convert a pixel to Uint8s via the shared typed views.\n  // sharedOK = true returns the sharedUint8s, useful\n  // for one-time computations like finding the pixel r,g,b,a values.\n  // Default is to clone the sharedUint8s.\n  pixelToUint8s (pixel, sharedOK = false) {\n    this.sharedPixel[0] = pixel\n    return sharedOK ? // eslint-disable-line\n      this.sharedUint8s : new Uint8ClampedArray(this.sharedUint8s)\n  },\n\n  // ### Typed Color\n  // A typedColor is a 4 element Uint8ClampedArray, with two properties:\n  //\n  // * pixelArray: A single element Uint32Array view on the Uint8ClampedArray\n  // * string: an optional, lazy evaluated, css color string.\n  //\n  // To create the color from a css string, especially hsl data, use:\n  // tc = Color.typedColor(Color.stringToUint8s('hsl(250, 50%, 50%)'))\n  // or\n  // tc = Color.typedColor(Color.stringToUint8s('PaleTurquoise'))\n  //\n  // This provides a universal color, good for pixels, webgl & image\n  // TypedArrays, and html/css/canvas2d strings.\n\n  typedColor (r, g, b, a = 255) {\n    const ua = r.buffer ? r : new Uint8ClampedArray([r, g, b, a])\n    ua.pixelArray = new Uint32Array(ua.buffer, ua.byteOffset, 1)\n    // Make this an instance of TypedColorProto\n    util.setPrototypeOf(ua, TypedColorProto)\n    // ua.__proto__ = TypedColorProto\n    return ua\n  }\n\n}\n// initialize sharedPixel and sharedUint8s\nColor.sharedPixel = new Uint32Array(1)\nColor.sharedUint8s = new Uint8ClampedArray(Color.sharedPixel.buffer)\n\nconst TypedColorProto = {\n  // Set TypedColorProto prototype to Uint8ClampedArray's prototype\n  __proto__: Uint8ClampedArray.prototype,\n  // Set the TypedArray; no need for getColor, it *is* the typed Uint8 array\n  setColor (r, g, b, a = 255) {\n    this.checkColorChange()\n    this[0] = r; this[1] = g; this[2] = b; this[3] = a\n  },\n  // Set the pixel view, changing the shared array (Uint8) view too\n  setPixel (pixel) {\n    this.checkColorChange()\n    this.pixelArray[0] = pixel\n  },\n  // Get the pixel value\n  getPixel () { return this.pixelArray[0] },\n  // Set pixel/rgba values to equivalent of the css string.\n  //\n  // Does *not* set the chached @string, which will be lazily evaluated\n  // to its triString. This lets the typedColor remain small without the\n  // color string until required by its getter.\n  //\n  // Note if you set string to \"red\" or \"rgb(255,0,0)\", the resulting\n  // css string will return the triString #f00 value.\n  setString (string) {\n    return this.setColor(...Color.stringToUint8s(string))\n  },\n  // Return the triString for this typedColor, cached in the @string value\n  getString () {\n    if (this.string == null) this.string = Color.triString(...this)\n    return this.string\n  },\n  // Return true if color is same value as myself, comparing pixels\n  equals (color) { return this.getPixel() === color.getPixel() },\n  // Housekeeping when a color is modified.\n  checkColorChange () {\n    // Check for immutable colormap color.\n    if (this.colormap) util.error('typedColor: cannot modify ColorMap color.')\n    // Reset string on color change.\n    this.string = null // will be lazy evaluated via getString.\n  }\n}\n\nexport default Color\n"]}