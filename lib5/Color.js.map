{"version":3,"sources":["../src/Color.js"],"names":[],"mappings":"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","file":"Color.js","sourcesContent":["// A general color module, supporting css string colors, canvas2d pixel\n// colors, webgl and canvas2d Uint8ClampedArray r,g,b,a arrays. Note: a\n// JavaScript Array is **not** a color!\n\nimport util from './util.js'\n\nconst Color = {\n\n// ### CSS Color Strings.\n\n  // CSS colors in HTML are strings, see [Mozillas Color Reference](\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/color_value),\n  // taking one of 7 forms:\n  //\n  // * Names: over 140 color case-insensitive names like\n  //   Red, Green, CadetBlue, etc.\n  // * Hex, short and long form: #0f0, #ff10a0\n  // * RGB: rgb(255, 0, 0), rgba(255, 0, 0, 0.5)\n  // * HSL: hsl(120, 100%, 50%), hsla(120, 100%, 50%, 0.8)\n  //\n  // See [this wikipedia article](https://goo.gl/ev8Kw0)\n  // on differences between HSL and HSB/HSV.\n\n  // Convert 4 r,g,b,a ints in [0-255] to a css color string.\n  // Alpha \"a\" is int in [0-255], converted to float in 0-1 for rgba string.\n  rgbaString (r, g, b, a = 255) {\n    a = a / 255; const a4 = a.toPrecision(4)\n    return (a === 1) ? `rgb(${r},${g},${b})` : `rgba(${r},${g},${b},${a4})`\n  },\n\n  // Convert 3 ints, h in [0-360], s,l in [0-100]% to a css color string.\n  // Alpha \"a\" is int in [0-255].\n  //\n  // Note h=0 and h=360 are the same, use h in 0-359 for unique colors.\n  hslString (h, s, l, a = 255) {\n    a = a / 255; const a4 = a.toPrecision(4)\n    return (a === 1) ? `hsl(${h},${s}%,${l}%)` : `hsla(${h},${s}%,${l}%,${a4})`\n  },\n\n  // Return a html/css hex color string for an r,g,b opaque color (a=255)\n  //\n  // Both #nnn and #nnnnnn forms supported.\n  // Default is to check for the short hex form: #nnn.\n  hexString (r, g, b, shortOK = true) {\n    if (shortOK) {\n      const [r0, g0, b0] = [r / 17, g / 17, b / 17]\n      if (util.isInteger(r0) && util.isInteger(g0) && util.isInteger(b0))\n        return this.hexShortString(r0, g0, b0)\n    }\n    return `#${(0x1000000 | (b | g << 8 | r << 16)).toString(16).slice(-6)}`\n  },\n  // Return the 4 char short version of a hex color.  Each of the r,g,b values\n  // must be in [0-15].  The resulting color will be equivalent\n  // to `r*17`, `g*17`, `b*17`, resulting in the 16 values:\n  //\n  //     0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255\n  //\n  // This is equivalent util.aIntRamp(0,255,16), i.e. 16 values per rgb channel.\n  hexShortString (r, g, b) {\n    if ((r > 15) || (g > 15) || (b > 15)) {\n      util.error(`hexShortString: one of ${[r, g, b]} > 15`)\n    }\n    return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`\n  },\n\n  // This is a hybrid string and generally our default.  It returns:\n  //\n  // * rgbaString if a not 255 (i.e. not opaque)\n  // * hexString otherwise\n  // * with the hexShortString if appropriate\n  triString (r, g, b, a = 255) {\n    return (a === 255) ? // eslint-disable-line\n      this.hexString(r, g, b, true) : this.rgbaString(r, g, b, a)\n  },\n\n// ### CSS String Conversions\n\n  // Return 4 element array given any legal CSS string color.\n  //\n  // Because strings vary widely: CadetBlue, #0f0, rgb(255,0,0),\n  // hsl(120,100%,50%), we do not parse strings, instead we let\n  // the browser do our work: we set a 1x1 canvas fillStyle\n  // to the string and create a pixel, returning the r,g,b,a TypedArray.\n\n  // The shared 1x1 canvas 2D context.\n  sharedCtx1x1: util.createCtx(1, 1), // share across calls.\n  // Convert any css string to TypedArray.\n  // If you need a JavaScript Array, use util.convertArray(array, Array)\n  stringToUint8s (string) {\n    this.sharedCtx1x1.fillStyle = string\n    this.sharedCtx1x1.fillRect(0, 0, 1, 1)\n    return this.sharedCtx1x1.getImageData(0, 0, 1, 1).data\n  },\n\n  // ### Typed Color\n  // A typedColor is a 4 element Uint8ClampedArray, with two properties:\n  //\n  // * pixelArray: A single element Uint32Array view on the Uint8ClampedArray\n  // * string: an optional, lazy evaluated, css color string.\n  //\n  // This provides a universal color, good for pixels, webgl & image\n  // TypedArrays, and css/canvas2d strings.\n\n  // Create typedColor from r,g,b,a. Use toTypedColor below for strings etc.\n  // If r is TypedArray, assumed to be length 4, use it for the typedColer.\n  // Used for colormaps and above functions returning 4 byte Uint8s.\n  typedColor (r, g, b, a = 255) {\n    const u8array = r.buffer ? r : new Uint8ClampedArray([r, g, b, a])\n    u8array.pixelArray = new Uint32Array(u8array.buffer) // one element array\n    // Make this an instance of TypedColorProto\n    util.setPrototypeOf(u8array, TypedColorProto)\n    return u8array\n  },\n  // Create a typedColor from a css string, pixel, JavaScript or Typed Array.\n  // Useful for hsl: toTypedColor(<hsl css string>) or any of the functions\n  // returning uint8s: toTypedColor(<uint8s array>)\n  toTypedColor (any) {\n    if (util.isTypedArray(any) && any.length === 4)\n      return this.typedColor(any)\n    const tc = this.typedColor(0, 0, 0, 0)\n    if (util.isInteger(any)) tc.setPixel(any)\n    else if (Array.isArray(any) || util.isTypedArray(any)) tc.setColor(...any)\n    else if (typeof any === 'string') tc.setString(any)\n    else util.error('toTypedColor: invalid argument')\n    return tc\n  },\n  // Return a random rgb typedColor, a=255\n  randomTypedColor () {\n    const r255 = () => util.randomInt(256) // random int in [0,255]\n    return this.typedColor(r255(), r255(), r255())\n  }\n\n}\n\nconst TypedColorProto = {\n  // Set TypedColorProto prototype to Uint8ClampedArray's prototype\n  __proto__: Uint8ClampedArray.prototype,\n  // Set the TypedArray\n  setColor (r, g, b, a = 255) {\n    this.checkColorChange()\n    this[0] = r; this[1] = g; this[2] = b; this[3] = a\n  },\n  // No need for getColor, it *is* the typed Uint8 array\n\n  // Set the pixel view, changing the shared array (Uint8) view too\n  setPixel (pixel) {\n    this.checkColorChange()\n    this.pixelArray[0] = pixel\n  },\n  // Get the pixel value\n  getPixel () { return this.pixelArray[0] },\n\n  // Set pixel/rgba values to equivalent of the css string.\n  // 'red', '#f00', 'ff0000', 'rgb(255,0,0)', etc equivalent\n  //\n  // Does *not* set the chached this.string, which will be lazily evaluated\n  // to its common triString by getString(). The above would all return '#f00'.\n  setString (string) {\n    return this.setColor(...Color.stringToUint8s(string))\n  },\n  // Return the triString for this typedColor, cached in the @string value\n  getString () {\n    if (this.string == null) this.string = Color.triString(...this)\n    return this.string\n  },\n  // Housekeeping when a color is modified.\n  checkColorChange () {\n    // Reset string on color change.\n    this.string = null // will be lazy evaluated via getString.\n  },\n  // Return true if color is same value as myself, comparing pixels\n  equals (color) { return this.getPixel() === color.getPixel() },\n  // Return a [distance metric](\n  // http://www.compuphase.com/cmetric.htm) between two colors.\n  // Max distance is roughly 765 (3*255), for black & white.\n  // For our purposes, omitting the sqrt will not effect our results\n  rgbDistance (r, g, b) {\n    const [r1, g1, b1] = this\n    const rMean = Math.round((r1 + r) / 2)\n    const [dr, dg, db] = [r1 - r, g1 - g, b1 - b]\n    const [dr2, dg2, db2] = [dr * dr, dg * dg, db * db]\n    const distanceSq =\n      (((512 + rMean) * dr2) >> 8) + (4 * dg2) + (((767 - rMean) * db2) >> 8)\n    return distanceSq // Math.sqrt(distanceSq)\n  }\n\n}\n\nexport default Color\n"]}